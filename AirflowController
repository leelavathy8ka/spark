import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/airflow")
public class AirflowController {

    @Autowired
    private AirflowService airflowService;

    @PostMapping("/trigger-dag-by-tag")
    public String triggerDag(@RequestHeader("Authorization") String token,
                             @RequestParam String tag,
                             @RequestParam String runId,
                             @RequestBody Map<String, Object> conf) {
        return airflowService.triggerDagByTag(token.replace("Bearer ", ""), tag, runId, conf);
    }
}


curl -X POST "https://localhost:8443/api/airflow/trigger-dag-by-tag" \
-H "Authorization: Bearer your_access_token_here" \
-H "Content-Type: application/json" \
-d '{
      "param1": "value1",
      "param2": "value2"
    }' \
--data-urlencode "tag=your_tag_here" \
--data-urlencode "runId=manual_run_2024-10-14"

public String triggerDagByTag(String token, String tag, String runId, Map<String, Object> conf) {
    List<String> dagIds = getDagsByTag(token, tag);
    
    if (dagIds.isEmpty()) {
        return "No DAGs found for the specified tag.";
    }

    // Trigger the first DAG found with the given tag
    return triggerDagRun(dagIds.get(0), token, runId, conf); // Triggering the first DAG as an example
}

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;

@Service
public class AirflowService {

    // Existing methods...

    public String triggerDagRun(String dagId, String token, String runId, Map<String, Object> conf) {
        String url = "https://localhost:8080/api/v1/dags/" + dagId + "/dagRuns";

        // Create headers and set the Authorization header with the Bearer token
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Bearer " + token);
        headers.set("Accept", "application/json");
        headers.setContentType(MediaType.APPLICATION_JSON);

        // Create the request body
        Map<String, Object> requestBody = new HashMap<>();
        requestBody.put("dag_run_id", runId);
        requestBody.put("conf", conf);

        // Create an HttpEntity containing the request body and headers
        HttpEntity<Map<String, Object>> entity = new HttpEntity<>(requestBody, headers);

        // Make the POST request
        ResponseEntity<String> response = restTemplate.exchange(
                url,
                HttpMethod.POST,
                entity,
                String.class
        );

        // Return the response body
        return response.getBody();
    }
}
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.List;

@Service
public class AirflowService {

    @Autowired
    private RestTemplate restTemplate;

    public List<String> getDagsByTag(String token, String tag) {
        String url = "https://localhost:8080/api/v1/dags?tags=" + tag;  // Replace with your Airflow server URL

        // Create headers and set the Authorization header with the Bearer token
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Bearer " + token);
        headers.set("Accept", "application/json");

        // Create an HttpEntity with the headers
        HttpEntity<String> entity = new HttpEntity<>(headers);

        // Make the GET request
        ResponseEntity<String> response = restTemplate.exchange(
                url,
                HttpMethod.GET,
                entity,
                String.class
        );

        // Extract and return DAG IDs from the response (this will depend on your API response format)
        // Here you would need to parse the response to extract the DAG IDs
        // Assuming response body contains a JSON array of DAG objects

        // Example pseudo code for parsing the response
        // List<String> dagIds = parseDagIdsFromResponse(response.getBody());

        return null; // Replace with actual list of DAG IDs
    }
}

import org.apache.http.conn.ssl.NoopHostnameVerifier;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.ssl.SSLContextBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;

import javax.net.ssl.SSLContext;

@Configuration
public class RestTemplateConfig {

    @Bean
    public RestTemplate restTemplate() throws Exception {
        SSLContext sslContext = SSLContextBuilder.create()
                .loadTrustMaterial((chain, authType) -> true) // Accept all certificates
                .build();

        CloseableHttpClient httpClient = HttpClients.custom()
                .setSSLContext(sslContext)
                .setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE)
                .build();

        return new RestTemplate(new HttpComponentsClientHttpRequestFactory(httpClient));
    }
}

public String getAllDags(String token) {
    String url = "https://localhost:8080/api/v1/dags";  // Use HTTPS

    // Create headers and set the Authorization header with the Bearer token
    HttpHeaders headers = new HttpHeaders();
    headers.set("Authorization", "Bearer " + token);
    headers.set("Accept", "application/json");

    // Create an HttpEntity with the headers
    HttpEntity<String> entity = new HttpEntity<>(headers);

    // Make the GET request
    ResponseEntity<String> response = restTemplate.exchange(
            url,
            HttpMethod.GET,
            entity,
            String.class
    );

    // Return the response body (the list of DAGs)
    return response.getBody();
}

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class AirflowController {

    @Autowired
    private AirflowService airflowService;

    @GetMapping("/api/dags")
    public String fetchAllDags(@RequestHeader("Authorization") String token) {
        return airflowService.getAllDags(token.replace("Bearer ", "")); // Remove "Bearer " prefix for the token
    }
}

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
public class AirflowService {

    @Autowired
    private RestTemplate restTemplate;

    public String getAllDags(String token) {
        String url = "http://localhost:8080/api/v1/dags";  // Replace with your Airflow server URL

        // Create headers and set the Authorization header with the Bearer token
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Bearer " + token);
        headers.set("Accept", "application/json");

        // Create an HttpEntity with the headers
        HttpEntity<String> entity = new HttpEntity<>(headers);

        // Make the GET request
        ResponseEntity<String> response = restTemplate.exchange(
                url,
                HttpMethod.GET,
                entity,
                String.class
        );

        // Return the response body (the list of DAGs)
        return response.getBody();
    }
}
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig implements WebMvcConfigurer {

    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**")  // Apply CORS settings to all endpoints
                .allowedOrigins("https://exampleclientapp1.com", "https://exampleclientapp2.com")  // Allowed origins
                .allowedMethods("GET", "POST", "DELETE", "OPTIONS")  // Allowed HTTP methods
                .allowedHeaders("Origin", "Content-Type", "Accept")  // Allowed headers
                .allowCredentials(true);  // Allow credentials
    }
}



package com.example.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class AirflowService {

    @Autowired
    private RestTemplate restTemplate;

    public List<String> getDagsByTag(String token, String tag) {
        String url = "https://localhost:8080/api/v1/dags?tags=" + tag;  // Replace with your Airflow server URL

        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Bearer " + token);
        headers.set("Accept", "application/json");

        HttpEntity<String> entity = new HttpEntity<>(headers);

        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);
        // Extract and return DAG IDs from the response (implement JSON parsing here)
        return null; // Return actual list of DAG IDs
    }

    public String triggerDagRun(String dagId, String token, String runId, Map<String, Object> conf) {
        String url = "https://localhost:8080/api/v1/dags/" + dagId + "/dagRuns";

        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Bearer " + token);
        headers.set("Accept", "application/json");
        headers.setContentType(MediaType.APPLICATION_JSON);

        Map<String, Object> requestBody = new HashMap<>();
        requestBody.put("dag_run_id", runId);
        requestBody.put("conf", conf);

        HttpEntity<Map<String, Object>> entity = new HttpEntity<>(requestBody, headers);
        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, entity, String.class);
        return response.getBody();
    }
}

package com.example.controller;

import com.example.service.AirflowService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/airflow")
public class AirflowController {

    @Autowired
    private AirflowService airflowService;

    @PostMapping("/trigger-dag-by-tag")
    public String triggerDag(@RequestHeader("Authorization") String token,
                             @RequestParam String tag,
                             @RequestParam String runId,
                             @RequestBody Map<String, Object> conf) {
        return airflowService.triggerDagByTag(token.replace("Bearer ", ""), tag, runId, conf);
    }
}

server.port=8443  # HTTPS port
server.ssl.key-store=classpath:springboot.jks
server.ssl.key-store-password=your_keystore_password
server.ssl.keyStoreType=JKS
server.ssl.key-alias=springboot





